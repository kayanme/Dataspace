//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Dataspace.Common;
using Dataspace.Common.Attributes;




namespace Projections.Test.Data
{
    [DataContract(Namespace = "http://Isp.DataContracts", IsReference = false)]
    [KnownType(typeof(Element))]
    [KnownType(typeof(Value))]
    
    [Resource("Attribute")]
    [Serializable]
    public partial class Attribute
    {
         
    
        #region Primitive Properties
        [DataMember]
        public virtual System.Guid Id
        {
          
            get;
            set;
        }
        [DataMember]
        public virtual string Name
        {
          
            get;
            set;
        }
        [DataMember]
        public virtual System.Guid ElementId
        {
            get { return _elementId; }
            set
            {
                if (_elementId != value)
                {
                    if (Element != null && Element.Id != value)
                    {
                        Element = null;
                    }
                    _elementId = value;
                }
            }
        }
        private System.Guid _elementId;

        #endregion

        #region Navigation Properties
    
    	[DataMember]	
        public virtual Element Element
        {
            get { return _element; }
            set
            {
                if (!ReferenceEquals(_element, value))
                {
                    var previousValue = _element;
                    _element = value;
                    FixupElement();
                }
            }
        }
        private Element _element;
    
    	[DataMember]	
        [XmlIgnore]
        public virtual ICollection<Value> Value
        {
            get
            {
                if (_value == null)
                {
                    var newCollection = new FixupCollection<Value>();             
                    _value = newCollection;
                }
                return _value;
            }
            set
            {
                if (!ReferenceEquals(_value, value))
                {                           
                    _value = value;                      
                }
            }
        }
        private ICollection<Value> _value;

        #endregion

        #region Association Fixup
    
        private void FixupElement()
        {
          
    
            if (Element != null)
            {
                
                if (ElementId != Element.Id)
                {
                    ElementId = Element.Id;
                }
            }
        }
    
        private void FixupValue(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Value item in e.NewItems)
                {
                    item.Attribute = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Value item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attribute, this))
                    {
                        item.Attribute = null;
                    }
                }
            }
        }

        #endregion

    }
}
